- hosts: localhost
  vars:
    - username: "{{ ansible_user }}"
  roles:
    - ssh-key

  tasks:
    - name: Install workstation packages
      become: yes
      tags: apt
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: latest
        force: yes
      with_items:
        - vim
        - git
        - zsh
        - htop
        - curl
        - wget
        - xbindkeys
        - xautomation
        - screen
        - terminator
        - ncdu
        - tree
        - krb5-user # for work
        - python3-venv
        - python3-pip
        - solaar # Logitech Unify
        - ruby # Chef
        - ruby-dev
        - zlib1g-dev
        - openssh-server
        - fonts-powerline

    # - name: Remove deprecated packages
    #   tags: apt
    #   apt:
    #     name: "{{ item }}"
    #     state: absent
    #     autoremove: yes
    #     autoclean: yes
    #   with_items:
    #     - None

    # - name: Install snap packages
    #   snap:
    #     name: "{{ item }}"
    #     classic: yes
    #   with_items:
    #     - code-insiders
    #     - chromium
    #     - slack
    #     - spotify

    - name: Retrieve Powerline font families
      tags: fonts
      git:
        repo: https://github.com/powerline/fonts.git
        dest: /tmp/powerline-fonts
        depth: 1
    
    - name: Install Powerline font families
      tags: fonts
      shell: /tmp/powerline-fonts/install.sh
      args:
        creates: "{{ ansible_user_dir }}.local/share/fonts"

    - name: "Git clone Prezto for current user: {{ansible_user_id }}"
      git:
        repo: https://github.com/sorin-ionescu/prezto.git
        dest: "{{ ansible_user_dir }}/.zprezto"
        depth: 1
    
    - name: Install Prezto
      file:
        path: "{{ ansible_user_dir }}/.{{ item }}"
        src: "{{ ansible_user_dir }}/.zprezto/runcoms/{{ item }}"
        state: link
        mode: 0644
      with_items:
          - zlogin
          - zlogout

    - name: "Git clone dotfiles for current user:  {{ ansible_user_id }}"
      git:
        repo: "{{ dotfiles_repo_url }}"
        dest: "{{ ansible_user_dir }}/.dotfiles"
        accept_hostkey: True
      register: dotfiles_repo
    
    - name: Symlink dotfiles
      command: "{{ ansible_user_dir }}/.dotfiles/dotfiles.sh link"
      when: dotfiles_repo.changed

    - name: Change shell to zsh
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh

    - name: Create Terminator config directory
      tags: nord
      file:
        path: "{{ ansible_user_dir }}/.config/terminator"
        state: directory

    - name: Add Terminator Nord theme
      tags: nord
      get_url:
        dest: "{{ ansible_user_dir }}/.config/terminator/config"
        url: https://raw.githubusercontent.com/arcticicestudio/nord-terminator/develop/src/config
        force: yes

    - name: Install Docker requirements
      become: yes
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: latest
        force: yes
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Add Docker GPG key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
      
    - name: "Add Docker repository for {{ ansible_distribution_release }}"
      become: yes
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu cosmic stable

    - name: Install Docker
      become: yes
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: latest
        force: yes
      with_items:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: Add Docker group
      become: yes
      group:
        name: docker
        system: yes
    
    - name: "Add current user {{ ansible_user_id }} to group"
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Add Nvidia repository
      become: yes
      apt_repository:
        repo: 'ppa:graphics-drivers'

    - name: Install Nvidia driver
      become: yes
      apt:
        name: nvidia-driver-430 # check latest version first: https://www.nvidia.com/object/unix.html
        update_cache: yes

    - name: Download Dropbox
      tags: dropbox
      command: "wget -O /tmp/dropbox.tar.gz \"https://www.dropbox.com/download?plat=lnx.x86_64\""
      args:
        creates: "{{ ansible_user_dir }}/.dropbox-dist/"
      register: download_dropbox
    
    - name: Extract Dropbox
      tags: dropbox
      unarchive:
        src: /tmp/dropbox.tar.gz
        dest: "{{ ansible_user_dir }}"
      when: download_dropbox.changed

    - name: Start Dropbox
      tags: dropbox
      command: "echo \"Dropbox new install, please execute {{ ansible_user_dir }}/.dropbox-dist/dropboxd\""
      when: download_dropbox.changed

    - name: Add Dropbox autostart
      tags:
        - dropbox
        - ignore
      copy:
        dest: "{{ ansible_user_dir }}/.config/autostart/dropboxd.desktop"
        content: |
          [Desktop Entry]
          Type=Application
          Exec={{ ansible_user_dir }}/.dropbox-dist/dropboxd
          Hidden=false
          NoDisplay=false
          X-GNOME-Autostart-enabled=true
          Name[en_US]=Dropbox
          Name=Dropbox
          Comment[en_US]=Dropbox
          Comment=Dropbox

    - name: Install OneDrive client
      tags: onedrive
      become: yes
      apt:
        name: onedrive
      register: install_onedrive

    - name: "Instructions, documentation: https://github.com/abraunegg/onedrive"
      tags:
        - onedrive
        - ignore
      become: yes
      command: systemctl --user enable onedrive && systemctl --user start onedrive
      when: install_onedrive.changed

    - name: Multiple screen Gnome workspaces
      command: gsettings set org.gnome.mutter workspaces-only-on-primary false

    - name: Cutomize Nautilus sidebar
      tags:
        - nautilus
        - ignore
      lineinfile:
        dest: "{{ ansible_user_dir }}/.config/user-dirs.dirs"
        regexp: "^{{ item }}"
        state: absent
      with_items:
        - XDG_TEMPLATES_DIR
        - XDG_PUBLICSHARE_DIR
        - XDG_DOCUMENTS_DIR
        - XDG_MUSIC_DIR
        - XDG_PICTURES_DIR
        - XDG_VIDEOS_DIR

    - name: Install Kite
      shell: bash -c "$(wget -q -O - https://linux.kite.com/dls/linux/current)"
      args:
        creates: "{{ ansible_user_dir }}/.local/share/kite/"

    # - name: Display paths of all .txt files in dir
    #   tags: firefox
    #   debug:
    #     msg: "{{ lookup('fileglob', '{{ ansible_user_dir }}/.mozilla/firefox/vyi8ui1k.default/*.js') }}"

    # - name: Set DNS resolver for Firefox
    #   # tags: firefox
    #   replace:
    #     path: "{{ lookup('fileglob', '{{ ansible_user_dir }}/.mozilla/firefox/*/prefs2.js') }}') }}"
    #     regexp: "^user_pref(\"{{ item.key }}\", (.*))$"
    #     replace: "{{ item.value }}"
    #   with_dict:
    #     - network.trr.bootstrapAddress: 5.182.208.0
    #     - network.trr.custom_uri: "https://dns.nextdns.io/8936ab"
    #     - network.trr.mode: 3
    #     - network.trr.uri: "https://dns.nextdns.io/8936ab"

# ln -s ~/Dropbox/Pictures/Simple\ Desktops ~/Pictures/Wallpapers

# Ruby / Chef
# gem install bundler
# bundle update --bundler
# https://github.com/abraunegg/onedrive

# mkdir -p ~/.gradle/init.d && curl -o ~/.gradle/init.d/criteo-init.gradle http://moab-filer.crto.in/scripts/criteo-init.gradle

## docker-compose
# sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose
